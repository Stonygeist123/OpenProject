generator client {
  provider      = "prisma-client-js"
  output        = "./client"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  name             String           @id @unique
  created_at       DateTime         @default(now())
  image            String
  communities      Community[]
  projects         Project[]
  password         String
  token            String           @unique
  task_submissions TaskSubmission[]
}

model Community {
  name        String    @id @unique
  description String
  owner       String
  subscribers User[]
  projects    Project[]
  messages    Message[]
  created_at  DateTime  @default(now())
}

model Project {
  id            Int        @id @unique @default(autoincrement())
  name          String
  description   String
  owner         String
  contributors  User[]
  tasks         Task[]
  created_at    DateTime   @default(now())
  isPrivate     Boolean
  image         String
  community     Community? @relation(fields: [communityName], references: [name])
  communityName String?
  tags          String     @default("")
  messages      Message[]
}

model Task {
  project       Project  @relation(fields: [projectId], references: [id])
  name          String   @id @unique
  description   String
  prerequisites Json
  files         Json
  created_at    DateTime @default(now())
  projectId     Int
}

model Submission {
  id         String   @id @unique
  user_name  String
  content    String
  images     Json
  created_at DateTime @default(now())
}

model TaskSubmission {
  id        String   @id @unique
  task_name String
  author    User     @relation(fields: [userName], references: [name])
  content   String
  images    Json
  createdAt DateTime @default(now())
  userName  String
}

model Tag {
  name String @id @unique
}

model Message {
  id            String     @id @unique
  content       String
  username      String
  project       Project?   @relation(fields: [projectId], references: [id])
  community     Community? @relation(fields: [communityName], references: [name])
  replyID       String?
  edited_at     DateTime   @default(now())
  created_at    DateTime   @default(now())
  projectId     Int?
  communityName String?
}
